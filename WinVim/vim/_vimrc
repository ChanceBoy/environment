
"""""""""""""""""""""""""""""""
" 設定
""""""""""""""""""""""""""""""
" " スムーズスクロール
" source $VIM/vim80/bundle/smooth_scroll.vim

" カーソル行を強調
set cursorline

" 折り返しなし
set nowrap

" 行番号
set number

" インクルードパス
"setlocal path+=D:\work\vimtest,D:\MyPrograms\dx11_template\src,C:\Program\ Files\ (x86)\Microsoft\ DirectX\ SDK\ (June\ 2010)\Include,C:\Program\ Files\ (x86)\Microsoft\ Visual\ Studio\ 12.0\VC\include
setlocal path+=$VIM\vimfiles

" ヤンク時にシステムにも保存
set clipboard=unnamed	" yank to the system register (*) by default

" register0をペースト
noremap <silent> <C-p> "0p<CR>

" 検索時に大文字小文字を区別しない
set ignorecase
set smartcase

".un~, .~といったファイルを一箇所に纏める
" set undodir=~/vimfiles/undo
" set backupdir=~/vimfiles/backup

".un~, .~といったファイルを作成しない
set noundofile
set nobackup

" grep結果を別ウィンドウで表示する
autocmd QuickFixCmdPost *grep* cwindow

" 空行のインデントを勝手に消さない
nnoremap o oX<C-h>
nnoremap O OX<C-h>
inoremap <CR> <CR>X<C-h>

" Leader
let mapleader = ","

" space character
set list
set listchars=tab:>.,trail:_,extends:>,precedes:<,nbsp:%

"""""""""""""""""""""""""""""
" 汎用キーバインド 
""""""""""""""""""""""""""""""

nnoremap s <Nop>

" window
" window間を移動
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sh <C-w>h
" windowそのものを移動
nnoremap sJ <C-w>J
nnoremap sK <C-w>K
nnoremap sL <C-w>L
nnoremap sH <C-w>H
" window分割
nnoremap ss :<C-u>sp<CR>
nnoremap sv :<C-u>vs<CR>
" tab操作
" nnoremap sn gt
" nnoremap sp gT
nnoremap <C-Tab>   gt
nnoremap <C-S-Tab> gT
nnoremap st :<C-u>tabnew<CR>
" windowサイズ統一
nnoremap sO <C-w>=

" unite
nnoremap sT :<C-u>Unite tab<CR>
" ↓tab内でのバッファ一覧こいつはtagbufferとかctrlspaceとかいうプラグインが必要らしい
nnoremap sb :<C-u>Unite buffer_tab -buffer-name=file<CR>
nnoremap sB :<C-u>Unite buffer -buffer-name=file<CR>

" 単語選択
nnoremap vv viw

" 置換コマンド
nnoremap <C-h> :%s/
vnoremap <C-h> :s/

""""""""""""""""""""""""""""""
" NeoBundle.vimの設定
""""""""""""""""""""""""""""""
" Note: Skip initialization for vim-tiny or vim-small.
 if 0 | endif

 if &compatible
   set nocompatible               " Be iMproved
 endif

 " Required:
 "set runtimepath+=~/.vim/bundle/neobundle.vim/
 set runtimepath+=$VIM/vimfiles/bundle/neobundle.vim/

 " Required:
 "call neobundle#begin(expand('~/.vim/bundle/'))
 call neobundle#begin(expand('$VIM/vimfiles/bundle/'))

 " Let NeoBundle manage NeoBundle
 " Required:
 NeoBundleFetch 'Shougo/neobundle.vim'

 " My Bundles here:
 " Refer to |:NeoBundle-examples|.
 " Note: You don't set neobundle setting in .gvimrc!
 
 NeoBundle 'Shougo/neomru.vim'
 NeoBundle 'Shougo/unite.vim'
 NeoBundle 'Shougo/vimfiler'
 NeoBundle 'Sh1mesuke/unite-outline'
"  NeoBundle 'Shougo/vimproc.vim', {
"             \ 'build' : {
"             \ 'windows' : 'make -f make_mingw64.mak',
"             \ 'cygwin' : 'make -f make_cygwin.mak',
"             \ 'mac' : 'make -f make_mac.mak',
"             \ 'unix' : 'make -f make_unix.mak',
"             \ },
"             \ }
 NeoBundle 'itchyny/lightline.vim'
 NeoBundle "tyru/caw.vim"
 NeoBundle 'tomasr/molokai'
 NeoBundle 'scrooloose/nerdtree'
 NeoBundle 'easymotion/vim-easymotion'
 NeoBundle 'simeji/winresizer'
"  " Programs
"  NeoBundle 'Shougo/neocomplete'
"  NeoBundle 'Shougo/neosnippet'
"  NeoBundle 'Shougo/neosnippet-snippets'
"  NeoBundle 'Shougo/neoinclude.vim'
"  " C++
"  NeoBundle 'mopp/next-alter.vim'
"  NeoBundle 'justmao945/vim-clang'
"  NeoBundleLazy 'vim-jp/cpp-vim', {
"             \ 'autoload' : {'filetypes' : 'cpp'}
"             \ }
"  NeoBundle 'vim-scripts/gtags.vim'
 " Other Laungauge
 NeoBundle 'tikhomirov/vim-glsl'
 NeoBundle 'beyondmarc/hlsl.vim'
 
 call neobundle#end()

 " Required:
 filetype plugin indent on

 " If there are uninstalled bundles found on startup,
 " this will conveniently prompt you to install them.
 NeoBundleCheck


""""""""""""""""""""""""""""""
" Unit.vimの設定
""""""""""""""""""""""""""""""

" " バッファ一覧
" noremap <C-P> :Unite buffer<CR>
" " ファイル一覧
" noremap <C-N> :Unite -buffer-name=file file<CR>
" " 最近使ったファイルの一覧
" noremap <C-Z> :Unite file_mru<CR>
" " sourcesを「今開いているファイルのディレクトリ」とする
" noremap :uff :<C-u>UniteWithBufferDir file -buffer-name=file<CR>

" 入力モードで開始する
let g:unite_enable_start_insert=1
" ヤンク履歴
let g:unite_source_history_yank_enable =1
nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>
" バッファ一覧
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
" ファイル一覧
nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" レジスタ一覧
nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
" 最近使用したファイル一覧
nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
" 常用セット
nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
" 全部乗せ
nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
" インサート／ノーマルどちらからでも呼び出せるようにキーマップ
" nnoremap <silent> <C-f> :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
" inoremap <silent> <C-f> <ESC>:<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> <C-b> :<C-u>Unite buffer file_mru<CR>
inoremap <silent> <C-b> <ESC>:<C-u>Unite buffer file_mru<CR>
" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-l> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

"----------------------grep関連動作しない
" 大文字小文字を区別しない
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1

" grep検索
nnoremap <silent> ,g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>

" カーソル位置の単語をgrep検索
nnoremap <silent> ,cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>

" grep検索結果の再呼出
nnoremap <silent> ,r  :<C-u>UniteResume search-buffer<CR>

" " unite grep に ag(The Silver Searcher) を使う
" if executable('ag')
"   let g:unite_source_grep_command = 'ag'
"   let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
"   let g:unite_source_grep_recursive_opt = ''
" endif


""""""""""""""""""""""""""""""
" VimFiler.vim
""""""""""""""""""""""""""""""

augroup vimfiler
  autocmd!
  autocmd FileType vimfiler call s:vimfiler_settings()
augroup END
function! s:vimfiler_settings()
  " tree での制御は，<Space>
  map <silent><buffer> <Space> <NOP>
  nmap <silent><buffer> <Space> <Plug>(vimfiler_expand_tree)
  nmap <silent><buffer> <S-Space> <Plug>(vimfiler_expand_tree_recursive)

  " EnterとEキーでウィンドウ分割して開く
  nmap <buffer><expr> <CR> vimfiler#smart_cursor_map(
          \ "\<Plug>(vimfiler_cd_file)",
          \ "\<Plug>(vimfiler_open_file_in_another_vimfiler)")
  
  nmap <buffer><expr> e vimfiler#smart_cursor_map(
          \ "\<Plug>(vimfiler_cd_file)",
          \ "\<Plug>(vimfiler_open_file_in_another_vimfiler)")

  " マークは，<C-Space>(control-space)
  nmap <silent><buffer> <C-Space> <Plug>(vimfiler_toggle_mark_current_line)
  vmap <silent><buffer> <C-Space> <Plug>(vimfiler_toggle_mark_selected_lines)

  " ウィンドウを分割して開く
  nnoremap <silent><buffer><expr> <C-j> vimfiler#do_switch_action('split')
  nnoremap <silent><buffer><expr> <C-l> vimfiler#do_switch_action('vsplit')

  " 移動，<Tab> だけでなく <C-l> も
  nmap <buffer> <C-l> <plug>(vimfiler_switch_to_other_window)

  " 閉じる，<Esc> 2 回叩き
  nmap <buffer> <Esc><Esc> <Plug>(vimfiler_exit)
endfunction


" VimFiler での絞り込みにUniteを用いる
" 表示されるのはvimのカレントディレクトリなので、自動的にcdする設定を使用
let g:vimfiler_enable_auto_cd = 1
autocmd FileType vimfiler 
        \ nnoremap <buffer><silent>f 
        \ :<C-u>Unite file -default-action=vimfiler<CR>


" 呼び出し
nnoremap <silent> <C-f> :<C-u>VimFilerSplit<CR>
 
""""""""""""""""""""""""""""""
" caw.vim
""""""""""""""""""""""""""""""

" コメントアウトを切り替えるマッピング
" \c でカーソル行をコメントアウト
" 再度 \c でコメントアウトを解除
" 選択してから複数行の \c も可能
nmap \c <Plug>(caw:I:toggle)
vmap \c <Plug>(caw:I:toggle)
nmap \C <Plug>(caw:I:uncomment)
vmap \C <Plug>(caw:I:uncomment)

"nmap <C-_> <Plug>(caw:i:toggle)
"vmap <C-_> <Plug>(caw:I:toggle)
"nmap <C-_> <Plug>(caw:I:uncomment)
"vmap <C-_> <Plug>(caw:I:uncomment)

" 非同期ではなくて同期処理で補完する
let g:marching_backend = "sync_clang_command"

" オプションの設定
" これは clang のコマンドに渡される
let g:marching_clang_command_option="-std=c++1y"

""""""""""""""""""""""""""""""
" lightline
""""""""""""""""""""""""""""""
let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'LightLineModified',
        \   'readonly': 'LightLineReadonly',
        \   'fugitive': 'LightLineFugitive',
        \   'filename': 'LightLineFilename',
        \   'fileformat': 'LightLineFileformat',
        \   'filetype': 'LightLineFiletype',
        \   'fileencoding': 'LightLineFileencoding',
        \   'mode': 'LightLineMode'
        \ }
        \ }

function! LightLineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
    return fugitive#head()
  else
    return ''
  endif
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

" """"""""""""""""""""""""""""""
" " vim-easymotion
" """"""""""""""""""""""""""""""
map <Leader> <Plug>(easymotion-prefix)
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
" nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap <C-s> <Plug>(easymotion-overwin-f2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <C-j> <Plug>(easymotion-j)
map <C-k> <Plug>(easymotion-k)

" """"""""""""""""""""""""""""""
" " NeoComplete
" """"""""""""""""""""""""""""""
" " Disable AutoComplPop.
" let g:acp_enableAtStartup = 0
" " Use neocomplete.
" let g:neocomplete#enable_at_startup = 1
" " Use smartcase.
" let g:neocomplete#enable_smart_case = 1
" " Set minimum syntax keyword length.
" let g:neocomplete#sources#syntax#min_keyword_length = 3
" let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
"
" " Define dictionary.
" let g:neocomplete#sources#dictionary#dictionaries = {
"     \ 'default' : '',
"     \ 'vimshell' : $HOME.'/.vimshell_hist',
"     \ 'scheme' : $HOME.'/.gosh_completions'
"         \ }
"
" " Define keyword.
" if !exists('g:neocomplete#keyword_patterns')
"     let g:neocomplete#keyword_patterns = {}
" endif
" let g:neocomplete#keyword_patterns['default'] = '\h\w*'
"
" " Plugin key-mappings.
" inoremap <expr><C-g>     neocomplete#undo_completion()
" inoremap <expr><C-l>     neocomplete#complete_common_string()
"
" """""""""""""""""""""""""""""""""""
" " Recommended key-mappings.
" " <CR>: close popup and save indent.
" inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
" function! s:my_cr_function()
"   "return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
"   " For no inserting <CR> key.
"   return pumvisible() ? "\<C-y>" : "\<CR>"
" endfunction
" " <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" " <C-h>, <BS>: close popup and delete backword char.
" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" " Close popup by <Space>.
" "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"
"
" " AutoComplPop like behavior.
" "let g:neocomplete#enable_auto_select = 1
"
" " Shell like behavior(not recommended).
" "set completeopt+=longest
" "let g:neocomplete#enable_auto_select = 1
" "let g:neocomplete#disable_auto_complete = 1
" "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"
" """""""""""""""""""""""""""""""""""
"
" " Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"
" " Enable heavy omni completion.
" if !exists('g:neocomplete#sources#omni#input_patterns')
"   let g:neocomplete#sources#omni#input_patterns = {}
" endif
" "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
" "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
" "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
"
" " For perlomni.vim setting.
" " https://github.com/c9s/perlomni.vim
" let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
"
"
" """""""""""""""""
" "以下自分で定義
" "
" " 補完候補の数
" let g:neocomplcache_max_list = 10
" " " " 1番目の候補を自動選択
" " let g:neocomplete#enable_auto_select = 1
" " " C-jでオムニ補完
" " inoremap <expr> <C-j> &filetype == 'vim' ? "\<C-x>\<C-v>\<C-p>" : "\<C-x>\<C-o>\<C-p>"
" " C-nでneocomplcache補完
" inoremap <expr><C-n>  pumvisible() ? "\<C-n>" : "\<C-x>\<C-u>\<C-p>"
" " " C-pでkeyword補完
" " inoremap <expr><C-p> pumvisible() ? "\<C-p>" : "\<C-p>\<C-n>"
"
" """"""""""""""""""""""""""""""
" " neosnippet
" """"""""""""""""""""""""""""""
" " Plugin key-mappings.
" imap <C-k>     <Plug>(neosnippet_expand_or_jump)
" smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" xmap <C-k>     <Plug>(neosnippet_expand_target)
"
" " SuperTab like snippets behavior.
" imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: pumvisible() ? "\<C-n>" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)"
" \: "\<TAB>"
"
" " For snippet_complete marker.
" if has('conceal')
"   set conceallevel=2 concealcursor=i
" endif
"
" """"""""""""""""""""""""""""""
" " vim-clang 
" """"""""""""""""""""""""""""""
" " 'Shougo/neocomplete.vim' {{{
" let g:neocomplete#enable_at_startup = 1
" if !exists('g:neocomplete#force_omni_input_patterns')
"         let g:neocomplete#force_omni_input_patterns = {}
" endif
" let g:neocomplete#force_overwrite_completefunc = 1
" let g:neocomplete#force_omni_input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
" let g:neocomplete#force_omni_input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
" """}}}
"
" " 'justmao945/vim-clang' {{{
"
" " disable auto completion for vim-clanG
" let g:clang_auto = 1
" let g:clang_complete_auto = 1
" let g:clang_auto_select = 1
" let g:clang_use_library = 1
"
" " default 'longest' can not work with neocomplete
" let g:clang_c_completeopt   = 'menuone'
" let g:clang_cpp_completeopt = 'menuone'
"
" if executable('clang-3.6')
"     let g:clang_exec = 'clang-3.6'
" elseif executable('clang-3.5')
"     let g:clang_exec = 'clang-3.5'
" elseif executable('clang-3.4')
"     let g:clang_exec = 'clang-3.4'
" else
"     let g:clang_exec = 'clang'
" endif
"
" if executable('clang-format-3.6')
"     let g:clang_format_exec = 'clang-format-3.6'
" elseif executable('clang-format-3.5')
"     let g:clang_format_exec = 'clang-format-3.5'
" elseif executable('clang-format-3.4')
"     let g:clang_format_exec = 'clang-format-3.4'
" else
" "     let g:clang_exec = 'clang-format'
" 	let g:clang_format_exec = 'clang-format'
" endif
"
" let g:clang_c_options = '-std=c11'
" let g:clang_cpp_options = '-std=c++11 -stdlib=libc++'
"
" " }}}
"
"
"
" "  let g:clang_complete_auto=1
" "  let g:clang_auto_select=1
" "  let g:clang_use_library=1
" "  let g:clang_debug=1
" "  let g:clang_library_path='D:/Programs/LLVM/lib'
"
"
" """"""""""""""""""""""""""""""
" " set clang options for vim-clang
"
" """"""""""""""""""""""""""""""
" let g:clang_c_options = '-std=c11'
" let g:clang_cpp_options = '-std=c++1z -stdlib=libc++ --pedantic-errors'
"
"
"
" """"""""""""""""""""""""""""""
" " gtags 
" """"""""""""""""""""""""""""""
" " map <F2> :Gtags 
" " map <F3> :Gtags -f %<CR>
" " map <F4> :GtagsCursor<CR>
" " map <F5> :cn<CR>
" " map <F6> :cp<CR>
"
" "  grep
" nmap <C-g> :Gtags -g
" " 関数一覧表示
" nmap <C-l> :Gtags -f %<CR>
" " 定義元を探す
" "nmap <F4> :Gtags <C-r><C-w><CR>
" nmap <C-t> :GtagsCursor<CR>
" " 使用箇所を探す
" nmap <C-e> :Gtags -r <C-r><C-w><CR>
"
" " カーソル移動 
" nmap <C-j> :cn<CR>
" nmap <C-k> :cp<CR>
"
" " """"""""""""""""""""""""""""""
" " " rtags 
" " """"""""""""""""""""""""""""""
" " " 定義へジャンプ
" " nnoremap <silent> <F3> :call rtags#JumpTo()<CR>
" " " 参照へジャンプ
" " nnoremap <silent> <F4> :<C-u>Unite<Space>rtags/references<CR>
" " " クラス・関数定義内にいたらその先頭へジャンプ
" " nnoremap <silent> <F5> :call rtags#JumpToParent()<CR>
"
"
" "---------------------------------------------------------
" " next-alter
" "---------------------------------------------------------
" "Prefix
" nmap <M-o> <Plug>(next-alter-open)
"
" " key is file extension, value is alternate file extension.
" let g:next_alter#pair_extension = { 
"             \ 'c'   : [ 'h' ],
"             \ 'C'   : [ 'H' ],
"             \ 'cc'  : [ 'h' ],
"             \ 'CC'  : [ 'H', 'h'],
"             \ 'cpp' : [ 'h', 'hpp' ],
"             \ 'CPP' : [ 'H', 'HPP' ],
"             \ 'cxx' : [ 'h', 'hpp' ],
"             \ 'CXX' : [ 'H', 'HPP' ],
"             \ 'h'   : [ 'c', 'cpp', 'cxx' ],
"             \ 'H'   : [ 'C', 'CPP', 'CXX' ],
"             \ 'hpp' : [ 'cpp', 'cxx'],
"             \ 'HPP' : [ 'CPP', 'CXX'],
"             \ }
" " this list shows search directory to find alternate file.
" let g:next_alter#search_dir = [ '.' , '..', './include', '../include' ]
"
" " 別タブで開くときとか
" " " this is used when it opens alternate file buffer.
" " let g:next_alter#open_option = 'vertical topleft'
"
